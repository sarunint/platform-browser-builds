{"version":3,"file":"by.js","sourceRoot":"","sources":["../../../../../../packages/platform-browser/src/dom/debug/by.ts"],"names":[],"mappings":";;;;;;;;;;;AASA,OAAO,EAAC,MAAM,EAAC,MAAM,uBAAuB,CAAC;;;;;;AAS7C,MAAM,OAAO,EAAE;;;;;;;;;;IASb,MAAM,CAAC,GAAG,KAA8B,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;;;;;;;;;;;IAUxE,MAAM,CAAC,GAAG,CAAC,QAAgB;QACzB,OAAO,CAAC,YAAY,EAAE,EAAE;YACtB,OAAO,YAAY,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC;gBACvC,MAAM,EAAE,CAAC,cAAc,CAAC,YAAY,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAC/D,KAAK,CAAC;SACX,CAAC;KACH;;;;;;;;;;;IAUD,MAAM,CAAC,SAAS,CAAC,IAAe;QAC9B,OAAO,CAAC,YAAY,EAAE,EAAE,oBAAC,YAAY,CAAC,cAAc,GAAG,OAAO,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;KAC7E;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DebugElement, Predicate, Type} from '@angular/core';\nimport {getDOM} from '../../dom/dom_adapter';\n\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all elements.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugElement> { return (debugElement) => true; }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null ?\n          getDOM().elementMatches(debugElement.nativeElement, selector) :\n          false;\n    };\n  }\n\n  /**\n   * Match elements that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugElement> {\n    return (debugElement) => debugElement.providerTokens !.indexOf(type) !== -1;\n  }\n}\n"]}