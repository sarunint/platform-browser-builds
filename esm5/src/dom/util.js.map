{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../packages/platform-browser/src/dom/util.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,OAAO,IAAI,MAAM,EAAC,MAAM,eAAe,CAAC;;AAEhD,IAAM,iBAAiB,GAAG,UAAU,CAAC;;AACrC,IAAM,gBAAgB,GAAG,WAAW,CAAC;;;;;AAGrC,MAAM,UAAU,mBAAmB,CAAC,KAAa;IAC/C,OAAO,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE;QAAC,WAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,sBAAc;;QAAK,OAAA,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;IAAxB,CAAwB,CAAC,CAAC;CACvF;;;;;AAED,MAAM,UAAU,mBAAmB,CAAC,KAAa;IAC/C,OAAO,KAAK,CAAC,OAAO,CAAC,gBAAgB,EAAE;QAAC,WAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,sBAAc;;QAAK,OAAA,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;IAAlB,CAAkB,CAAC,CAAC;CAChF;;;;;;;;;AASD,MAAM,UAAU,WAAW,CAAC,IAAY,EAAE,KAAU;IAClD,IAAI,OAAO,QAAQ,KAAK,WAAW,IAAI,CAAC,QAAQ,EAAE;;QAKhD,IAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,mBAAC,MAAM,CAAC,IAAI,CAAoC,EAAC,IAAI,EAAE,CAAC;QAClF,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;KAClB;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Éµglobal as global} from '@angular/core';\n\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nconst DASH_CASE_REGEXP = /-([a-z])/g;\n\n\nexport function camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: string[]) => '-' + m[1].toLowerCase());\n}\n\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: string[]) => m[1].toUpperCase());\n}\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as{[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n"]}