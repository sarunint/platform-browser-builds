{"version":3,"file":"browser_platform_location.js","sourceRoot":"","sources":["../../../../../../../packages/platform-browser/src/browser/location/browser_platform_location.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAyB,gBAAgB,EAAC,MAAM,iBAAiB,CAAC;AACzE,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,eAAe,CAAC;AAEjD,OAAO,EAAC,MAAM,EAAC,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,QAAQ,EAAC,MAAM,sBAAsB,CAAC;AAE9C,OAAO,EAAC,aAAa,EAAC,MAAM,WAAW,CAAC;;;;;;;IAUK,mDAAgB;IAM3D,iCAAsC,IAAS;QAA/C,YACE,iBAAO,SAER;QAHqC,UAAI,GAAJ,IAAI,CAAK;QAE7C,KAAI,CAAC,KAAK,EAAE,CAAC;;KACd;IAED,0FAA0F;IAC1F,gBAAgB;;;;;IAChB,uCAAK;;;;IAAL;QACE,mBAAC,IAA2B,EAAC,CAAC,QAAQ,GAAG,MAAM,EAAE,CAAC,WAAW,EAAE,CAAC;QAChE,IAAI,CAAC,QAAQ,GAAG,MAAM,EAAE,CAAC,UAAU,EAAE,CAAC;KACvC;;;;IAED,oDAAkB;;;IAAlB,cAA+B,0BAAO,MAAM,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;;;;;IAE1E,4CAAU;;;;IAAV,UAAW,EAA0B;QACnC,MAAM,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,gBAAgB,CAAC,UAAU,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;KAC5F;;;;;IAED,8CAAY;;;;IAAZ,UAAa,EAA0B;QACrC,MAAM,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,gBAAgB,CAAC,YAAY,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;KAC9F;IAED,sBAAI,6CAAQ;;;;QAAZ,cAAyB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;;;;;QAGzD,UAAa,OAAe,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,OAAO,CAAC,EAAE;;;OAHV;IACzD,sBAAI,2CAAM;;;;QAAV,cAAuB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;;;OAAA;IACrD,sBAAI,yCAAI;;;;QAAR,cAAqB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;;;OAAA;;;;;;;IAGjD,2CAAS;;;;;;IAAT,UAAU,KAAU,EAAE,KAAa,EAAE,GAAW;QAC9C,IAAI,aAAa,EAAE,EAAE;YACnB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SAC5C;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC;SAC1B;KACF;;;;;;;IAED,8CAAY;;;;;;IAAZ,UAAa,KAAU,EAAE,KAAa,EAAE,GAAW;QACjD,IAAI,aAAa,EAAE,EAAE;YACnB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SAC/C;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC;SAC1B;KACF;;;;IAED,yCAAO;;;IAAP,cAAkB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,EAAE;;;;IAE5C,sCAAI;;;IAAJ,cAAe,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE;;gBApDvC,UAAU;;;;gDAOI,MAAM,SAAC,QAAQ;;kCA9B9B;EAwB6C,gBAAgB;SAAhD,uBAAuB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {DOCUMENT} from '../../dom/dom_tokens';\n\nimport {supportsState} from './history';\n\n\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\n@Injectable()\nexport class BrowserPlatformLocation extends PlatformLocation {\n  // TODO(issue/24571): remove '!'.\n  public readonly location !: Location;\n  // TODO(issue/24571): remove '!'.\n  private _history !: History;\n\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._init();\n  }\n\n  // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n  /** @internal */\n  _init() {\n    (this as{location: Location}).location = getDOM().getLocation();\n    this._history = getDOM().getHistory();\n  }\n\n  getBaseHrefFromDOM(): string { return getDOM().getBaseHref(this._doc) !; }\n\n  onPopState(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n  }\n\n  onHashChange(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n  }\n\n  get pathname(): string { return this.location.pathname; }\n  get search(): string { return this.location.search; }\n  get hash(): string { return this.location.hash; }\n  set pathname(newPath: string) { this.location.pathname = newPath; }\n\n  pushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  forward(): void { this._history.forward(); }\n\n  back(): void { this._history.back(); }\n}\n"]}